# Generated by Django 5.1 on 2025-01-31 01:40

import a_psat.models.abstract_models
import a_psat.models.choices
import django.db.models.deletion
import django.db.models.functions.comparison
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('a_psat', '0007_predictcategory_predictanswercount_predictlocation_and_more'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='PredictAnswerCountLowRank',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('count_1', models.IntegerField(default=0, verbose_name='①')),
                ('count_2', models.IntegerField(default=0, verbose_name='②')),
                ('count_3', models.IntegerField(default=0, verbose_name='③')),
                ('count_4', models.IntegerField(default=0, verbose_name='④')),
                ('count_5', models.IntegerField(default=0, verbose_name='⑤')),
                ('count_0', models.IntegerField(default=0, verbose_name='미표기')),
                ('count_multiple', models.IntegerField(default=0, verbose_name='중복표기')),
                ('count_sum', models.IntegerField(default=0, verbose_name='총계')),
                ('answer_predict', models.GeneratedField(db_persist=True, expression=models.Case(models.When(models.Q(('count_1', django.db.models.functions.comparison.Greatest('count_1', 'count_2', 'count_3', 'count_4', 'count_5'))), then=models.Value(1)), models.When(models.Q(('count_2', django.db.models.functions.comparison.Greatest('count_1', 'count_2', 'count_3', 'count_4', 'count_5'))), then=models.Value(2)), models.When(models.Q(('count_3', django.db.models.functions.comparison.Greatest('count_1', 'count_2', 'count_3', 'count_4', 'count_5'))), then=models.Value(3)), models.When(models.Q(('count_4', django.db.models.functions.comparison.Greatest('count_1', 'count_2', 'count_3', 'count_4', 'count_5'))), then=models.Value(4)), models.When(models.Q(('count_5', django.db.models.functions.comparison.Greatest('count_1', 'count_2', 'count_3', 'count_4', 'count_5'))), then=models.Value(5)), default=None), output_field=models.IntegerField())),
                ('filtered_count_1', models.IntegerField(default=0, verbose_name='[필터링]①')),
                ('filtered_count_2', models.IntegerField(default=0, verbose_name='[필터링]②')),
                ('filtered_count_3', models.IntegerField(default=0, verbose_name='[필터링]③')),
                ('filtered_count_4', models.IntegerField(default=0, verbose_name='[필터링]④')),
                ('filtered_count_5', models.IntegerField(default=0, verbose_name='[필터링]⑤')),
                ('filtered_count_0', models.IntegerField(default=0, verbose_name='[필터링]미표기')),
                ('filtered_count_multiple', models.IntegerField(default=0, verbose_name='[필터링]중복표기')),
                ('filtered_count_sum', models.IntegerField(default=0, verbose_name='[필터링]총계')),
            ],
            options={
                'verbose_name': '[합격예측] 11_답안 개수(하위권)',
                'verbose_name_plural': '[합격예측] 11_답안 개수(하위권)',
                'db_table': 'a_psat_predict_answer_count_low_rank',
            },
        ),
        migrations.CreateModel(
            name='PredictAnswerCountMidRank',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('count_1', models.IntegerField(default=0, verbose_name='①')),
                ('count_2', models.IntegerField(default=0, verbose_name='②')),
                ('count_3', models.IntegerField(default=0, verbose_name='③')),
                ('count_4', models.IntegerField(default=0, verbose_name='④')),
                ('count_5', models.IntegerField(default=0, verbose_name='⑤')),
                ('count_0', models.IntegerField(default=0, verbose_name='미표기')),
                ('count_multiple', models.IntegerField(default=0, verbose_name='중복표기')),
                ('count_sum', models.IntegerField(default=0, verbose_name='총계')),
                ('answer_predict', models.GeneratedField(db_persist=True, expression=models.Case(models.When(models.Q(('count_1', django.db.models.functions.comparison.Greatest('count_1', 'count_2', 'count_3', 'count_4', 'count_5'))), then=models.Value(1)), models.When(models.Q(('count_2', django.db.models.functions.comparison.Greatest('count_1', 'count_2', 'count_3', 'count_4', 'count_5'))), then=models.Value(2)), models.When(models.Q(('count_3', django.db.models.functions.comparison.Greatest('count_1', 'count_2', 'count_3', 'count_4', 'count_5'))), then=models.Value(3)), models.When(models.Q(('count_4', django.db.models.functions.comparison.Greatest('count_1', 'count_2', 'count_3', 'count_4', 'count_5'))), then=models.Value(4)), models.When(models.Q(('count_5', django.db.models.functions.comparison.Greatest('count_1', 'count_2', 'count_3', 'count_4', 'count_5'))), then=models.Value(5)), default=None), output_field=models.IntegerField())),
                ('filtered_count_1', models.IntegerField(default=0, verbose_name='[필터링]①')),
                ('filtered_count_2', models.IntegerField(default=0, verbose_name='[필터링]②')),
                ('filtered_count_3', models.IntegerField(default=0, verbose_name='[필터링]③')),
                ('filtered_count_4', models.IntegerField(default=0, verbose_name='[필터링]④')),
                ('filtered_count_5', models.IntegerField(default=0, verbose_name='[필터링]⑤')),
                ('filtered_count_0', models.IntegerField(default=0, verbose_name='[필터링]미표기')),
                ('filtered_count_multiple', models.IntegerField(default=0, verbose_name='[필터링]중복표기')),
                ('filtered_count_sum', models.IntegerField(default=0, verbose_name='[필터링]총계')),
            ],
            options={
                'verbose_name': '[합격예측] 10_답안 개수(중위권)',
                'verbose_name_plural': '[합격예측] 10_답안 개수(중위권)',
                'db_table': 'a_psat_predict_answer_count_mid_rank',
            },
        ),
        migrations.CreateModel(
            name='PredictAnswerCountTopRank',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('count_1', models.IntegerField(default=0, verbose_name='①')),
                ('count_2', models.IntegerField(default=0, verbose_name='②')),
                ('count_3', models.IntegerField(default=0, verbose_name='③')),
                ('count_4', models.IntegerField(default=0, verbose_name='④')),
                ('count_5', models.IntegerField(default=0, verbose_name='⑤')),
                ('count_0', models.IntegerField(default=0, verbose_name='미표기')),
                ('count_multiple', models.IntegerField(default=0, verbose_name='중복표기')),
                ('count_sum', models.IntegerField(default=0, verbose_name='총계')),
                ('answer_predict', models.GeneratedField(db_persist=True, expression=models.Case(models.When(models.Q(('count_1', django.db.models.functions.comparison.Greatest('count_1', 'count_2', 'count_3', 'count_4', 'count_5'))), then=models.Value(1)), models.When(models.Q(('count_2', django.db.models.functions.comparison.Greatest('count_1', 'count_2', 'count_3', 'count_4', 'count_5'))), then=models.Value(2)), models.When(models.Q(('count_3', django.db.models.functions.comparison.Greatest('count_1', 'count_2', 'count_3', 'count_4', 'count_5'))), then=models.Value(3)), models.When(models.Q(('count_4', django.db.models.functions.comparison.Greatest('count_1', 'count_2', 'count_3', 'count_4', 'count_5'))), then=models.Value(4)), models.When(models.Q(('count_5', django.db.models.functions.comparison.Greatest('count_1', 'count_2', 'count_3', 'count_4', 'count_5'))), then=models.Value(5)), default=None), output_field=models.IntegerField())),
                ('filtered_count_1', models.IntegerField(default=0, verbose_name='[필터링]①')),
                ('filtered_count_2', models.IntegerField(default=0, verbose_name='[필터링]②')),
                ('filtered_count_3', models.IntegerField(default=0, verbose_name='[필터링]③')),
                ('filtered_count_4', models.IntegerField(default=0, verbose_name='[필터링]④')),
                ('filtered_count_5', models.IntegerField(default=0, verbose_name='[필터링]⑤')),
                ('filtered_count_0', models.IntegerField(default=0, verbose_name='[필터링]미표기')),
                ('filtered_count_multiple', models.IntegerField(default=0, verbose_name='[필터링]중복표기')),
                ('filtered_count_sum', models.IntegerField(default=0, verbose_name='[필터링]총계')),
            ],
            options={
                'verbose_name': '[합격예측] 09_답안 개수(상위권)',
                'verbose_name_plural': '[합격예측] 09_답안 개수(상위권)',
                'db_table': 'a_psat_predict_answer_count_top_rank',
            },
        ),
        migrations.CreateModel(
            name='PredictStatistics',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('department', models.CharField(choices=a_psat.models.choices.statistics_department_choice, default='전체', max_length=40, verbose_name='직렬')),
                ('subject_0', models.JSONField(default=a_psat.models.abstract_models.get_default_statistics, verbose_name='헌법')),
                ('subject_1', models.JSONField(default=a_psat.models.abstract_models.get_default_statistics, verbose_name='언어논리')),
                ('subject_2', models.JSONField(default=a_psat.models.abstract_models.get_default_statistics, verbose_name='자료해석')),
                ('subject_3', models.JSONField(default=a_psat.models.abstract_models.get_default_statistics, verbose_name='상황판단')),
                ('average', models.JSONField(default=a_psat.models.abstract_models.get_default_statistics, verbose_name='PSAT')),
                ('filtered_subject_0', models.JSONField(default=a_psat.models.abstract_models.get_default_statistics, verbose_name='[필터링]헌법')),
                ('filtered_subject_1', models.JSONField(default=a_psat.models.abstract_models.get_default_statistics, verbose_name='[필터링]언어논리')),
                ('filtered_subject_2', models.JSONField(default=a_psat.models.abstract_models.get_default_statistics, verbose_name='[필터링]자료해석')),
                ('filtered_subject_3', models.JSONField(default=a_psat.models.abstract_models.get_default_statistics, verbose_name='[필터링]상황판단')),
                ('filtered_average', models.JSONField(default=a_psat.models.abstract_models.get_default_statistics, verbose_name='[필터링]PSAT')),
            ],
            options={
                'verbose_name': '[합격예측] 02_시험통계',
                'verbose_name_plural': '[합격예측] 02_시험통계',
                'db_table': 'a_psat_predict_statistics',
            },
        ),
        migrations.AlterModelOptions(
            name='predictanswer',
            options={'verbose_name': '[합격예측] 04_답안', 'verbose_name_plural': '[합격예측] 04_답안'},
        ),
        migrations.AlterModelOptions(
            name='predictanswercount',
            options={'verbose_name': '[합격예측] 05_답안 개수', 'verbose_name_plural': '[합격예측] 05_답안 개수'},
        ),
        migrations.AlterModelOptions(
            name='predictlocation',
            options={'verbose_name': '[합격예측] 12_시험 장소', 'verbose_name_plural': '[합격예측] 12_시험 장소'},
        ),
        migrations.AlterModelOptions(
            name='predictpsat',
            options={'ordering': ['-psat__year', 'exam_started_at'], 'verbose_name': '[합격예측] 00_PSAT', 'verbose_name_plural': '[합격예측] 00_PSAT'},
        ),
        migrations.AlterModelOptions(
            name='predictrankcategory',
            options={'verbose_name': '[합격예측] 08_직렬 등수', 'verbose_name_plural': '[합격예측] 08_직렬 등수'},
        ),
        migrations.AlterModelOptions(
            name='predictranktotal',
            options={'verbose_name': '[합격예측] 07_전체 등수', 'verbose_name_plural': '[합격예측] 07_전체 등수'},
        ),
        migrations.AlterModelOptions(
            name='predictscore',
            options={'verbose_name': '[합격예측] 06_점수', 'verbose_name_plural': '[합격예측] 06_점수'},
        ),
        migrations.AlterModelOptions(
            name='predictstudent',
            options={'verbose_name': '[합격예측] 03_수험정보', 'verbose_name_plural': '[합격예측] 03_수험정보'},
        ),
        migrations.RenameField(
            model_name='predictanswercount',
            old_name='count_total',
            new_name='count_sum',
        ),
        migrations.RenameField(
            model_name='predictscore',
            old_name='total',
            new_name='sum',
        ),
        migrations.RemoveField(
            model_name='predictrankcategory',
            name='total',
        ),
        migrations.RemoveField(
            model_name='predictranktotal',
            name='total',
        ),
        migrations.AddField(
            model_name='predictanswer',
            name='created_at',
            field=models.DateTimeField(auto_now_add=True, default=django.utils.timezone.now, verbose_name='작성 일시'),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='predictanswercount',
            name='answer_predict',
            field=models.GeneratedField(db_persist=True, expression=models.Case(models.When(models.Q(('count_1', django.db.models.functions.comparison.Greatest('count_1', 'count_2', 'count_3', 'count_4', 'count_5'))), then=models.Value(1)), models.When(models.Q(('count_2', django.db.models.functions.comparison.Greatest('count_1', 'count_2', 'count_3', 'count_4', 'count_5'))), then=models.Value(2)), models.When(models.Q(('count_3', django.db.models.functions.comparison.Greatest('count_1', 'count_2', 'count_3', 'count_4', 'count_5'))), then=models.Value(3)), models.When(models.Q(('count_4', django.db.models.functions.comparison.Greatest('count_1', 'count_2', 'count_3', 'count_4', 'count_5'))), then=models.Value(4)), models.When(models.Q(('count_5', django.db.models.functions.comparison.Greatest('count_1', 'count_2', 'count_3', 'count_4', 'count_5'))), then=models.Value(5)), default=None), output_field=models.IntegerField()),
        ),
        migrations.AddField(
            model_name='predictanswercount',
            name='filtered_count_0',
            field=models.IntegerField(default=0, verbose_name='[필터링]미표기'),
        ),
        migrations.AddField(
            model_name='predictanswercount',
            name='filtered_count_1',
            field=models.IntegerField(default=0, verbose_name='[필터링]①'),
        ),
        migrations.AddField(
            model_name='predictanswercount',
            name='filtered_count_2',
            field=models.IntegerField(default=0, verbose_name='[필터링]②'),
        ),
        migrations.AddField(
            model_name='predictanswercount',
            name='filtered_count_3',
            field=models.IntegerField(default=0, verbose_name='[필터링]③'),
        ),
        migrations.AddField(
            model_name='predictanswercount',
            name='filtered_count_4',
            field=models.IntegerField(default=0, verbose_name='[필터링]④'),
        ),
        migrations.AddField(
            model_name='predictanswercount',
            name='filtered_count_5',
            field=models.IntegerField(default=0, verbose_name='[필터링]⑤'),
        ),
        migrations.AddField(
            model_name='predictanswercount',
            name='filtered_count_multiple',
            field=models.IntegerField(default=0, verbose_name='[필터링]중복표기'),
        ),
        migrations.AddField(
            model_name='predictanswercount',
            name='filtered_count_sum',
            field=models.IntegerField(default=0, verbose_name='[필터링]총계'),
        ),
        migrations.AddField(
            model_name='predictpsat',
            name='is_active',
            field=models.BooleanField(default=False, verbose_name='활성'),
        ),
        migrations.AddField(
            model_name='predictpsat',
            name='predict_closed_at',
            field=models.DateTimeField(default=django.utils.timezone.now, verbose_name='합격 에측 종료 일시'),
        ),
        migrations.AddField(
            model_name='predictrankcategory',
            name='average',
            field=models.IntegerField(blank=True, null=True, verbose_name='PSAT'),
        ),
        migrations.AddField(
            model_name='predictrankcategory',
            name='filtered_average',
            field=models.IntegerField(blank=True, null=True, verbose_name='[필터링]PSAT'),
        ),
        migrations.AddField(
            model_name='predictrankcategory',
            name='filtered_participants',
            field=models.IntegerField(blank=True, null=True, verbose_name='[필터링]총 인원'),
        ),
        migrations.AddField(
            model_name='predictrankcategory',
            name='filtered_subject_0',
            field=models.IntegerField(blank=True, null=True, verbose_name='[필터링]헌법'),
        ),
        migrations.AddField(
            model_name='predictrankcategory',
            name='filtered_subject_1',
            field=models.IntegerField(blank=True, null=True, verbose_name='[필터링]언어논리'),
        ),
        migrations.AddField(
            model_name='predictrankcategory',
            name='filtered_subject_2',
            field=models.IntegerField(blank=True, null=True, verbose_name='[필터링]자료해석'),
        ),
        migrations.AddField(
            model_name='predictrankcategory',
            name='filtered_subject_3',
            field=models.IntegerField(blank=True, null=True, verbose_name='[필터링]상황판단'),
        ),
        migrations.AddField(
            model_name='predictrankcategory',
            name='participants',
            field=models.IntegerField(blank=True, null=True, verbose_name='총 인원'),
        ),
        migrations.AddField(
            model_name='predictranktotal',
            name='average',
            field=models.IntegerField(blank=True, null=True, verbose_name='PSAT'),
        ),
        migrations.AddField(
            model_name='predictranktotal',
            name='filtered_average',
            field=models.IntegerField(blank=True, null=True, verbose_name='[필터링]PSAT'),
        ),
        migrations.AddField(
            model_name='predictranktotal',
            name='filtered_participants',
            field=models.IntegerField(blank=True, null=True, verbose_name='[필터링]총 인원'),
        ),
        migrations.AddField(
            model_name='predictranktotal',
            name='filtered_subject_0',
            field=models.IntegerField(blank=True, null=True, verbose_name='[필터링]헌법'),
        ),
        migrations.AddField(
            model_name='predictranktotal',
            name='filtered_subject_1',
            field=models.IntegerField(blank=True, null=True, verbose_name='[필터링]언어논리'),
        ),
        migrations.AddField(
            model_name='predictranktotal',
            name='filtered_subject_2',
            field=models.IntegerField(blank=True, null=True, verbose_name='[필터링]자료해석'),
        ),
        migrations.AddField(
            model_name='predictranktotal',
            name='filtered_subject_3',
            field=models.IntegerField(blank=True, null=True, verbose_name='[필터링]상황판단'),
        ),
        migrations.AddField(
            model_name='predictranktotal',
            name='participants',
            field=models.IntegerField(blank=True, null=True, verbose_name='총 인원'),
        ),
        migrations.AddField(
            model_name='predictscore',
            name='average',
            field=models.FloatField(blank=True, null=True, verbose_name='PSAT 평균'),
        ),
        migrations.AddField(
            model_name='predictstudent',
            name='created_at',
            field=models.DateTimeField(auto_now_add=True, default=django.utils.timezone.now, verbose_name='생성 일시'),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='predictstudent',
            name='is_filtered',
            field=models.BooleanField(default=False, verbose_name='필터링 여부'),
        ),
        migrations.AddField(
            model_name='predictstudent',
            name='password',
            field=models.CharField(default=0, max_length=10, verbose_name='비밀번호'),
        ),
        migrations.AlterField(
            model_name='predictanswercount',
            name='problem',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='predict_answer_count', to='a_psat.problem'),
        ),
        migrations.AlterField(
            model_name='predictcategory',
            name='department',
            field=models.CharField(choices=a_psat.models.choices.predict_department_choice, default='일반행정', max_length=40, verbose_name='직렬'),
        ),
        migrations.AlterField(
            model_name='predictlocation',
            name='category',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='locations', to='a_psat.predictcategory', verbose_name='모집단위·직렬'),
        ),
        migrations.AlterField(
            model_name='predictlocation',
            name='psat',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='locations', to='a_psat.predictpsat'),
        ),
        migrations.AlterField(
            model_name='predictrankcategory',
            name='student',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='rank_category', to='a_psat.predictstudent'),
        ),
        migrations.AlterField(
            model_name='predictrankcategory',
            name='subject_0',
            field=models.IntegerField(blank=True, null=True, verbose_name='헌법'),
        ),
        migrations.AlterField(
            model_name='predictrankcategory',
            name='subject_1',
            field=models.IntegerField(blank=True, null=True, verbose_name='언어논리'),
        ),
        migrations.AlterField(
            model_name='predictrankcategory',
            name='subject_2',
            field=models.IntegerField(blank=True, null=True, verbose_name='자료해석'),
        ),
        migrations.AlterField(
            model_name='predictrankcategory',
            name='subject_3',
            field=models.IntegerField(blank=True, null=True, verbose_name='상황판단'),
        ),
        migrations.AlterField(
            model_name='predictranktotal',
            name='student',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='rank_total', to='a_psat.predictstudent'),
        ),
        migrations.AlterField(
            model_name='predictranktotal',
            name='subject_0',
            field=models.IntegerField(blank=True, null=True, verbose_name='헌법'),
        ),
        migrations.AlterField(
            model_name='predictranktotal',
            name='subject_1',
            field=models.IntegerField(blank=True, null=True, verbose_name='언어논리'),
        ),
        migrations.AlterField(
            model_name='predictranktotal',
            name='subject_2',
            field=models.IntegerField(blank=True, null=True, verbose_name='자료해석'),
        ),
        migrations.AlterField(
            model_name='predictranktotal',
            name='subject_3',
            field=models.IntegerField(blank=True, null=True, verbose_name='상황판단'),
        ),
        migrations.AlterField(
            model_name='predictstudent',
            name='category',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='predict_students', to='a_psat.predictcategory'),
        ),
        migrations.AlterField(
            model_name='predictstudent',
            name='psat',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='predict_students', to='a_psat.predictpsat'),
        ),
        migrations.AlterField(
            model_name='psat',
            name='year',
            field=models.IntegerField(choices=a_psat.models.choices.year_choice, default=2025, verbose_name='연도'),
        ),
        migrations.AddConstraint(
            model_name='predictanswer',
            constraint=models.UniqueConstraint(fields=('student', 'problem'), name='unique_psat_predict_answer'),
        ),
        migrations.AddConstraint(
            model_name='predictcategory',
            constraint=models.UniqueConstraint(fields=('exam', 'unit', 'department'), name='unique_psat_predict_category'),
        ),
        migrations.AddConstraint(
            model_name='predictstudent',
            constraint=models.UniqueConstraint(fields=('psat', 'category', 'user', 'name', 'serial'), name='unique_psat_predict_student'),
        ),
        migrations.AddField(
            model_name='predictanswercountlowrank',
            name='problem',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='predict_answer_count_low_rank', to='a_psat.problem'),
        ),
        migrations.AddField(
            model_name='predictanswercountmidrank',
            name='problem',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='predict_answer_count_mid_rank', to='a_psat.problem'),
        ),
        migrations.AddField(
            model_name='predictanswercounttoprank',
            name='problem',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='predict_answer_count_top_rank', to='a_psat.problem'),
        ),
        migrations.AddField(
            model_name='predictstatistics',
            name='psat',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='predict_statistics', to='a_psat.predictpsat'),
        ),
        migrations.AddConstraint(
            model_name='predictstatistics',
            constraint=models.UniqueConstraint(fields=('psat', 'department'), name='unique_psat_predict_statistics'),
        ),
    ]
