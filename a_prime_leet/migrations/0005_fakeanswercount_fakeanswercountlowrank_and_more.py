# Generated by Django 5.2 on 2025-05-04 12:17

import a_prime_leet.models.abstract_models
import a_prime_leet.models.choices
import django.db.models.deletion
import django.db.models.functions.comparison
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('a_prime_leet', '0004_leet_predict_closed_at'),
    ]

    operations = [
        migrations.CreateModel(
            name='FakeAnswerCount',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('count_1', models.IntegerField(default=0, verbose_name='①')),
                ('count_2', models.IntegerField(default=0, verbose_name='②')),
                ('count_3', models.IntegerField(default=0, verbose_name='③')),
                ('count_4', models.IntegerField(default=0, verbose_name='④')),
                ('count_5', models.IntegerField(default=0, verbose_name='⑤')),
                ('count_0', models.IntegerField(default=0, verbose_name='미표기')),
                ('count_multiple', models.IntegerField(default=0, verbose_name='중복표기')),
                ('count_sum', models.IntegerField(default=0, verbose_name='총계')),
                ('answer_predict', models.GeneratedField(db_persist=True, expression=models.Case(models.When(models.Q(('count_1', django.db.models.functions.comparison.Greatest('count_1', 'count_2', 'count_3', 'count_4', 'count_5'))), then=models.Value(1)), models.When(models.Q(('count_2', django.db.models.functions.comparison.Greatest('count_1', 'count_2', 'count_3', 'count_4', 'count_5'))), then=models.Value(2)), models.When(models.Q(('count_3', django.db.models.functions.comparison.Greatest('count_1', 'count_2', 'count_3', 'count_4', 'count_5'))), then=models.Value(3)), models.When(models.Q(('count_4', django.db.models.functions.comparison.Greatest('count_1', 'count_2', 'count_3', 'count_4', 'count_5'))), then=models.Value(4)), models.When(models.Q(('count_5', django.db.models.functions.comparison.Greatest('count_1', 'count_2', 'count_3', 'count_4', 'count_5'))), then=models.Value(5)), default=None), output_field=models.IntegerField())),
                ('problem', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='fake_answer_count', to='a_prime_leet.problem')),
            ],
            options={
                'verbose_name': '[가상답안] 08_답안 개수(전체)',
                'verbose_name_plural': '[가상답안] 08_답안 개수(전체)',
                'db_table': 'a_prime_leet_fake_answer_count',
            },
        ),
        migrations.CreateModel(
            name='FakeAnswerCountLowRank',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('count_1', models.IntegerField(default=0, verbose_name='①')),
                ('count_2', models.IntegerField(default=0, verbose_name='②')),
                ('count_3', models.IntegerField(default=0, verbose_name='③')),
                ('count_4', models.IntegerField(default=0, verbose_name='④')),
                ('count_5', models.IntegerField(default=0, verbose_name='⑤')),
                ('count_0', models.IntegerField(default=0, verbose_name='미표기')),
                ('count_multiple', models.IntegerField(default=0, verbose_name='중복표기')),
                ('count_sum', models.IntegerField(default=0, verbose_name='총계')),
                ('answer_predict', models.GeneratedField(db_persist=True, expression=models.Case(models.When(models.Q(('count_1', django.db.models.functions.comparison.Greatest('count_1', 'count_2', 'count_3', 'count_4', 'count_5'))), then=models.Value(1)), models.When(models.Q(('count_2', django.db.models.functions.comparison.Greatest('count_1', 'count_2', 'count_3', 'count_4', 'count_5'))), then=models.Value(2)), models.When(models.Q(('count_3', django.db.models.functions.comparison.Greatest('count_1', 'count_2', 'count_3', 'count_4', 'count_5'))), then=models.Value(3)), models.When(models.Q(('count_4', django.db.models.functions.comparison.Greatest('count_1', 'count_2', 'count_3', 'count_4', 'count_5'))), then=models.Value(4)), models.When(models.Q(('count_5', django.db.models.functions.comparison.Greatest('count_1', 'count_2', 'count_3', 'count_4', 'count_5'))), then=models.Value(5)), default=None), output_field=models.IntegerField())),
                ('problem', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='fake_answer_count_low_rank', to='a_prime_leet.problem')),
            ],
            options={
                'verbose_name': '[가상답안] 11_답안 개수(하위권)',
                'verbose_name_plural': '[가상답안] 11_답안 개수(하위권)',
                'db_table': 'a_prime_leet_fake_answer_count_low_rank',
            },
        ),
        migrations.CreateModel(
            name='FakeAnswerCountMidRank',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('count_1', models.IntegerField(default=0, verbose_name='①')),
                ('count_2', models.IntegerField(default=0, verbose_name='②')),
                ('count_3', models.IntegerField(default=0, verbose_name='③')),
                ('count_4', models.IntegerField(default=0, verbose_name='④')),
                ('count_5', models.IntegerField(default=0, verbose_name='⑤')),
                ('count_0', models.IntegerField(default=0, verbose_name='미표기')),
                ('count_multiple', models.IntegerField(default=0, verbose_name='중복표기')),
                ('count_sum', models.IntegerField(default=0, verbose_name='총계')),
                ('answer_predict', models.GeneratedField(db_persist=True, expression=models.Case(models.When(models.Q(('count_1', django.db.models.functions.comparison.Greatest('count_1', 'count_2', 'count_3', 'count_4', 'count_5'))), then=models.Value(1)), models.When(models.Q(('count_2', django.db.models.functions.comparison.Greatest('count_1', 'count_2', 'count_3', 'count_4', 'count_5'))), then=models.Value(2)), models.When(models.Q(('count_3', django.db.models.functions.comparison.Greatest('count_1', 'count_2', 'count_3', 'count_4', 'count_5'))), then=models.Value(3)), models.When(models.Q(('count_4', django.db.models.functions.comparison.Greatest('count_1', 'count_2', 'count_3', 'count_4', 'count_5'))), then=models.Value(4)), models.When(models.Q(('count_5', django.db.models.functions.comparison.Greatest('count_1', 'count_2', 'count_3', 'count_4', 'count_5'))), then=models.Value(5)), default=None), output_field=models.IntegerField())),
                ('problem', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='fake_answer_count_mid_rank', to='a_prime_leet.problem')),
            ],
            options={
                'verbose_name': '[가상답안] 10_답안 개수(중위권)',
                'verbose_name_plural': '[가상답안] 10_답안 개수(중위권)',
                'db_table': 'a_prime_leet_fake_answer_count_mid_rank',
            },
        ),
        migrations.CreateModel(
            name='FakeAnswerCountTopRank',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('count_1', models.IntegerField(default=0, verbose_name='①')),
                ('count_2', models.IntegerField(default=0, verbose_name='②')),
                ('count_3', models.IntegerField(default=0, verbose_name='③')),
                ('count_4', models.IntegerField(default=0, verbose_name='④')),
                ('count_5', models.IntegerField(default=0, verbose_name='⑤')),
                ('count_0', models.IntegerField(default=0, verbose_name='미표기')),
                ('count_multiple', models.IntegerField(default=0, verbose_name='중복표기')),
                ('count_sum', models.IntegerField(default=0, verbose_name='총계')),
                ('answer_predict', models.GeneratedField(db_persist=True, expression=models.Case(models.When(models.Q(('count_1', django.db.models.functions.comparison.Greatest('count_1', 'count_2', 'count_3', 'count_4', 'count_5'))), then=models.Value(1)), models.When(models.Q(('count_2', django.db.models.functions.comparison.Greatest('count_1', 'count_2', 'count_3', 'count_4', 'count_5'))), then=models.Value(2)), models.When(models.Q(('count_3', django.db.models.functions.comparison.Greatest('count_1', 'count_2', 'count_3', 'count_4', 'count_5'))), then=models.Value(3)), models.When(models.Q(('count_4', django.db.models.functions.comparison.Greatest('count_1', 'count_2', 'count_3', 'count_4', 'count_5'))), then=models.Value(4)), models.When(models.Q(('count_5', django.db.models.functions.comparison.Greatest('count_1', 'count_2', 'count_3', 'count_4', 'count_5'))), then=models.Value(5)), default=None), output_field=models.IntegerField())),
                ('problem', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='fake_answer_count_top_rank', to='a_prime_leet.problem')),
            ],
            options={
                'verbose_name': '[가상답안] 09_답안 개수(상위권)',
                'verbose_name_plural': '[가상답안] 09_답안 개수(상위권)',
                'db_table': 'a_prime_leet_fake_answer_count_top_rank',
            },
        ),
        migrations.CreateModel(
            name='FakeRefAnswerCount',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('count_1', models.IntegerField(default=0, verbose_name='①')),
                ('count_2', models.IntegerField(default=0, verbose_name='②')),
                ('count_3', models.IntegerField(default=0, verbose_name='③')),
                ('count_4', models.IntegerField(default=0, verbose_name='④')),
                ('count_5', models.IntegerField(default=0, verbose_name='⑤')),
                ('count_0', models.IntegerField(default=0, verbose_name='미표기')),
                ('count_multiple', models.IntegerField(default=0, verbose_name='중복표기')),
                ('count_sum', models.IntegerField(default=0, verbose_name='총계')),
                ('answer_predict', models.GeneratedField(db_persist=True, expression=models.Case(models.When(models.Q(('count_1', django.db.models.functions.comparison.Greatest('count_1', 'count_2', 'count_3', 'count_4', 'count_5'))), then=models.Value(1)), models.When(models.Q(('count_2', django.db.models.functions.comparison.Greatest('count_1', 'count_2', 'count_3', 'count_4', 'count_5'))), then=models.Value(2)), models.When(models.Q(('count_3', django.db.models.functions.comparison.Greatest('count_1', 'count_2', 'count_3', 'count_4', 'count_5'))), then=models.Value(3)), models.When(models.Q(('count_4', django.db.models.functions.comparison.Greatest('count_1', 'count_2', 'count_3', 'count_4', 'count_5'))), then=models.Value(4)), models.When(models.Q(('count_5', django.db.models.functions.comparison.Greatest('count_1', 'count_2', 'count_3', 'count_4', 'count_5'))), then=models.Value(5)), default=None), output_field=models.IntegerField())),
                ('problem', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='fake_ref_answer_count', to='a_prime_leet.problem')),
            ],
            options={
                'verbose_name': '[가상답안] 01_참고 답안 개수',
                'verbose_name_plural': '[가상답안] 01_참고 답안 개수',
                'db_table': 'a_prime_leet_fake_ref_answer_count',
            },
        ),
        migrations.CreateModel(
            name='FakeStudent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('serial', models.CharField(max_length=10, verbose_name='수험번호')),
                ('name', models.CharField(max_length=20, verbose_name='이름')),
                ('password', models.CharField(blank=True, max_length=10, null=True, verbose_name='비밀번호')),
                ('aspiration_1', models.CharField(blank=True, choices=a_prime_leet.models.choices.university_choice, max_length=10, null=True, verbose_name='1지망')),
                ('aspiration_2', models.CharField(blank=True, choices=a_prime_leet.models.choices.university_choice, max_length=10, null=True, verbose_name='2지망')),
                ('leet', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='fake_students', to='a_prime_leet.leet')),
            ],
            options={
                'verbose_name': '[가상답안] 03_수험정보',
                'verbose_name_plural': '[가상답안] 03_수험정보',
                'db_table': 'a_prime_leet_fake_student',
            },
        ),
        migrations.CreateModel(
            name='FakeScore',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('raw_subject_0', models.IntegerField(blank=True, null=True, verbose_name='언어이해 원점수')),
                ('raw_subject_1', models.IntegerField(blank=True, null=True, verbose_name='추리논증 원점수')),
                ('raw_sum', models.IntegerField(blank=True, null=True, verbose_name='총점 원점수')),
                ('subject_0', models.FloatField(blank=True, null=True, verbose_name='언어이해 표준점수')),
                ('subject_1', models.FloatField(blank=True, null=True, verbose_name='추리논증 표준점수')),
                ('sum', models.FloatField(blank=True, null=True, verbose_name='총점 표준점수')),
                ('student', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='score', to='a_prime_leet.fakestudent')),
            ],
            options={
                'verbose_name': '[가상답안] 04_점수',
                'verbose_name_plural': '[가상답안] 04_점수',
                'db_table': 'a_prime_leet_fake_score',
            },
        ),
        migrations.CreateModel(
            name='FakeRankAspiration2',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('subject_0', models.IntegerField(blank=True, null=True, verbose_name='언어이해 등수')),
                ('subject_1', models.IntegerField(blank=True, null=True, verbose_name='추리논증 등수')),
                ('sum', models.IntegerField(blank=True, null=True, verbose_name='총점 등수')),
                ('participants', models.IntegerField(blank=True, null=True, verbose_name='총 인원')),
                ('student', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='rank_aspiration_2', to='a_prime_leet.fakestudent')),
            ],
            options={
                'verbose_name': '[가상답안] 07_등수(2지망)',
                'verbose_name_plural': '[가상답안] 07_등수(2지망)',
                'db_table': 'a_prime_leet_fake_rank_aspiration_2',
            },
        ),
        migrations.CreateModel(
            name='FakeRankAspiration1',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('subject_0', models.IntegerField(blank=True, null=True, verbose_name='언어이해 등수')),
                ('subject_1', models.IntegerField(blank=True, null=True, verbose_name='추리논증 등수')),
                ('sum', models.IntegerField(blank=True, null=True, verbose_name='총점 등수')),
                ('participants', models.IntegerField(blank=True, null=True, verbose_name='총 인원')),
                ('student', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='rank_aspiration_1', to='a_prime_leet.fakestudent')),
            ],
            options={
                'verbose_name': '[가상답안] 06_등수(1지망)',
                'verbose_name_plural': '[가상답안] 06_등수(1지망)',
                'db_table': 'a_prime_leet_fake_rank_aspiration_1',
            },
        ),
        migrations.CreateModel(
            name='FakeRank',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('subject_0', models.IntegerField(blank=True, null=True, verbose_name='언어이해 등수')),
                ('subject_1', models.IntegerField(blank=True, null=True, verbose_name='추리논증 등수')),
                ('sum', models.IntegerField(blank=True, null=True, verbose_name='총점 등수')),
                ('participants', models.IntegerField(blank=True, null=True, verbose_name='총 인원')),
                ('student', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='rank', to='a_prime_leet.fakestudent')),
            ],
            options={
                'verbose_name': '[가상답안] 05_등수(전체)',
                'verbose_name_plural': '[가상답안] 05_등수(전체)',
                'db_table': 'a_prime_leet_fake_rank',
            },
        ),
        migrations.CreateModel(
            name='FakeRefAspiration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('university', models.CharField(choices=a_prime_leet.models.choices.university_choice, max_length=10, verbose_name='지망 대학')),
                ('aspiration_1', models.IntegerField(default=0, verbose_name='1지망 지원자수')),
                ('aspiration_2', models.IntegerField(default=0, verbose_name='2지망 지원자수')),
                ('aspiration_sum', models.IntegerField(default=0, verbose_name='전체 지원자수')),
                ('leet', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='fake_ref_aspiration', to='a_prime_leet.leet')),
            ],
            options={
                'verbose_name': '[가상답안] 00_참고 지원자수',
                'verbose_name_plural': '[가상답안] 00_참고 지원자수',
                'db_table': 'a_prime_leet_fake_ref_aspiration',
                'constraints': [models.UniqueConstraint(fields=('leet', 'university'), name='unique_prime_leet_fake_ref_aspiration')],
            },
        ),
        migrations.CreateModel(
            name='FakeStatistics',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('aspiration', models.CharField(choices=a_prime_leet.models.choices.statistics_aspiration_choice, default='전체', max_length=10, verbose_name='지망 대학')),
                ('raw_subject_0', models.JSONField(default=a_prime_leet.models.abstract_models.get_default_statistics, verbose_name='언어이해 원점수')),
                ('raw_subject_1', models.JSONField(default=a_prime_leet.models.abstract_models.get_default_statistics, verbose_name='추리논증 원점수')),
                ('raw_sum', models.JSONField(default=a_prime_leet.models.abstract_models.get_default_statistics, verbose_name='총점 원점수')),
                ('subject_0', models.JSONField(default=a_prime_leet.models.abstract_models.get_default_statistics, verbose_name='언어이해 표준점수')),
                ('subject_1', models.JSONField(default=a_prime_leet.models.abstract_models.get_default_statistics, verbose_name='추리논증 표준점수')),
                ('sum', models.JSONField(default=a_prime_leet.models.abstract_models.get_default_statistics, verbose_name='총점 표준점수')),
                ('leet', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='fake_statistics', to='a_prime_leet.leet')),
            ],
            options={
                'verbose_name': '[가상답안] 02_시험통계',
                'verbose_name_plural': '[가상답안] 02_시험통계',
                'db_table': 'a_prime_leet_fake_statistics',
                'constraints': [models.UniqueConstraint(fields=('leet', 'aspiration'), name='unique_prime_leet_fake_statistics')],
            },
        ),
        migrations.AddConstraint(
            model_name='fakestudent',
            constraint=models.UniqueConstraint(fields=('leet', 'serial'), name='unique_prime_leet_fake_student'),
        ),
    ]
