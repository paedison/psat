# Generated by Django 3.2.19 on 2023-06-19 02:13

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import psat.models
import taggit.managers


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('taggit', '0005_auto_20220424_2025'),
    ]

    operations = [
        migrations.CreateModel(
            name='Exam',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('year', models.IntegerField()),
                ('ex', models.CharField(max_length=2)),
                ('sub', models.CharField(max_length=2)),
                ('exam1', models.CharField(max_length=20)),
                ('exam2', models.CharField(max_length=20)),
                ('subject', models.CharField(max_length=4)),
                ('year_ex_sub', models.CharField(max_length=8)),
            ],
            options={
                'ordering': ['-year'],
            },
            bases=(psat.models.AddInfo, models.Model),
        ),
        migrations.CreateModel(
            name='Problem',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('number', models.IntegerField()),
                ('question', models.TextField()),
                ('answer', models.IntegerField()),
                ('exam', models.ForeignKey(db_column='exam_id', on_delete=django.db.models.deletion.CASCADE, to='psat.exam')),
                ('tags', taggit.managers.TaggableManager(help_text='A comma-separated list of tags.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags')),
            ],
            options={
                'ordering': ['-exam__year', 'id'],
            },
            bases=(psat.models.AddInfo, models.Model),
        ),
        migrations.CreateModel(
            name='ProblemData',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('data', models.TextField()),
                ('problem', models.OneToOneField(db_column='problem_id', on_delete=django.db.models.deletion.CASCADE, to='psat.problem', verbose_name='문제 ID')),
            ],
            bases=(psat.models.AddInfo, models.Model),
        ),
        migrations.CreateModel(
            name='Evaluation',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('opened_at', models.DateTimeField(null=True, verbose_name='오픈 일시')),
                ('opened_times', models.IntegerField(null=True, verbose_name='오픈 횟수')),
                ('liked_at', models.DateTimeField(null=True, verbose_name='추천 일시')),
                ('liked_times', models.IntegerField(null=True, verbose_name='추천 횟수')),
                ('is_liked', models.BooleanField(null=True, verbose_name='추천 여부')),
                ('rated_at', models.DateTimeField(null=True, verbose_name='평가 일시')),
                ('rated_times', models.IntegerField(null=True, verbose_name='평가 횟수')),
                ('difficulty_rated', models.IntegerField(choices=[(1, '⭐️'), (2, '⭐️⭐️'), (3, '⭐️⭐️⭐️'), (4, '⭐️⭐️⭐️⭐️'), (5, '⭐️⭐️⭐️⭐️⭐️')], null=True, verbose_name='평가 난이도')),
                ('answered_at', models.DateTimeField(null=True, verbose_name='정답확인 일시')),
                ('answered_times', models.IntegerField(null=True, verbose_name='정답확인 횟수')),
                ('submitted_answer', models.IntegerField(null=True, verbose_name='제출 정답')),
                ('is_correct', models.BooleanField(null=True, verbose_name='정오 여부')),
                ('problem', models.ForeignKey(db_column='problem_id', on_delete=django.db.models.deletion.CASCADE, to='psat.problem', verbose_name='문제 ID')),
                ('user', models.ForeignKey(db_column='user_id', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='사용자 ID')),
            ],
            options={
                'ordering': ['-problem__exam__year', 'problem__exam__id', 'problem__number'],
            },
            bases=(psat.models.AddInfo, psat.models.UpdateInfo, models.Model),
        ),
    ]
