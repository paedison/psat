# Generated by Django 5.1 on 2024-12-22 09:51

import a_prime.models.abstract_models
import a_prime.models.choices
import django.db.models.deletion
import django.db.models.functions.comparison
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('a_prime', '0007_resultscore_average'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.AlterField(
            model_name='resultstatistics',
            name='average',
            field=models.JSONField(default=a_prime.models.abstract_models.get_default_statistics, verbose_name='PSAT'),
        ),
        migrations.AlterField(
            model_name='resultstatistics',
            name='subject_0',
            field=models.JSONField(default=a_prime.models.abstract_models.get_default_statistics, verbose_name='헌법'),
        ),
        migrations.AlterField(
            model_name='resultstatistics',
            name='subject_1',
            field=models.JSONField(default=a_prime.models.abstract_models.get_default_statistics, verbose_name='언어논리'),
        ),
        migrations.AlterField(
            model_name='resultstatistics',
            name='subject_2',
            field=models.JSONField(default=a_prime.models.abstract_models.get_default_statistics, verbose_name='자료해석'),
        ),
        migrations.AlterField(
            model_name='resultstatistics',
            name='subject_3',
            field=models.JSONField(default=a_prime.models.abstract_models.get_default_statistics, verbose_name='상황판단'),
        ),
        migrations.AlterField(
            model_name='resultstudent',
            name='password',
            field=models.CharField(default=0, max_length=10, verbose_name='비밀번호'),
        ),
        migrations.CreateModel(
            name='PredictAnswerCount',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('count_1', models.IntegerField(default=0, verbose_name='①')),
                ('count_2', models.IntegerField(default=0, verbose_name='②')),
                ('count_3', models.IntegerField(default=0, verbose_name='③')),
                ('count_4', models.IntegerField(default=0, verbose_name='④')),
                ('count_5', models.IntegerField(default=0, verbose_name='⑤')),
                ('count_0', models.IntegerField(default=0, verbose_name='미표기')),
                ('count_multiple', models.IntegerField(default=0, verbose_name='중복표기')),
                ('count_sum', models.IntegerField(default=0, verbose_name='총계')),
                ('filtered_count_1', models.IntegerField(default=0, verbose_name='[필터링]①')),
                ('filtered_count_2', models.IntegerField(default=0, verbose_name='[필터링]②')),
                ('filtered_count_3', models.IntegerField(default=0, verbose_name='[필터링]③')),
                ('filtered_count_4', models.IntegerField(default=0, verbose_name='[필터링]④')),
                ('filtered_count_5', models.IntegerField(default=0, verbose_name='[필터링]⑤')),
                ('filtered_count_0', models.IntegerField(default=0, verbose_name='[필터링]미표기')),
                ('filtered_count_multiple', models.IntegerField(default=0, verbose_name='[필터링]중복표기')),
                ('filtered_count_sum', models.IntegerField(default=0, verbose_name='[필터링]총계')),
                ('answer_predict', models.GeneratedField(db_persist=True, expression=models.Case(models.When(models.Q(('count_1', django.db.models.functions.comparison.Greatest('count_1', 'count_2', 'count_3', 'count_4', 'count_5'))), then=models.Value(1)), models.When(models.Q(('count_2', django.db.models.functions.comparison.Greatest('count_1', 'count_2', 'count_3', 'count_4', 'count_5'))), then=models.Value(2)), models.When(models.Q(('count_3', django.db.models.functions.comparison.Greatest('count_1', 'count_2', 'count_3', 'count_4', 'count_5'))), then=models.Value(3)), models.When(models.Q(('count_4', django.db.models.functions.comparison.Greatest('count_1', 'count_2', 'count_3', 'count_4', 'count_5'))), then=models.Value(4)), models.When(models.Q(('count_5', django.db.models.functions.comparison.Greatest('count_1', 'count_2', 'count_3', 'count_4', 'count_5'))), then=models.Value(5)), default=None), output_field=models.IntegerField())),
                ('problem', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='predict_answer_count', to='a_prime.problem')),
            ],
            options={
                'verbose_name': '[성적예측] 04_답안 개수',
                'verbose_name_plural': '[성적예측] 04_답안 개수',
                'db_table': 'a_prime_predict_answer_count',
            },
        ),
        migrations.CreateModel(
            name='PredictAnswerCountLowRank',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('count_1', models.IntegerField(default=0, verbose_name='①')),
                ('count_2', models.IntegerField(default=0, verbose_name='②')),
                ('count_3', models.IntegerField(default=0, verbose_name='③')),
                ('count_4', models.IntegerField(default=0, verbose_name='④')),
                ('count_5', models.IntegerField(default=0, verbose_name='⑤')),
                ('count_0', models.IntegerField(default=0, verbose_name='미표기')),
                ('count_multiple', models.IntegerField(default=0, verbose_name='중복표기')),
                ('count_sum', models.IntegerField(default=0, verbose_name='총계')),
                ('filtered_count_1', models.IntegerField(default=0, verbose_name='[필터링]①')),
                ('filtered_count_2', models.IntegerField(default=0, verbose_name='[필터링]②')),
                ('filtered_count_3', models.IntegerField(default=0, verbose_name='[필터링]③')),
                ('filtered_count_4', models.IntegerField(default=0, verbose_name='[필터링]④')),
                ('filtered_count_5', models.IntegerField(default=0, verbose_name='[필터링]⑤')),
                ('filtered_count_0', models.IntegerField(default=0, verbose_name='[필터링]미표기')),
                ('filtered_count_multiple', models.IntegerField(default=0, verbose_name='[필터링]중복표기')),
                ('filtered_count_sum', models.IntegerField(default=0, verbose_name='[필터링]총계')),
                ('problem', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='predict_answer_count_low_rank', to='a_prime.problem')),
            ],
            options={
                'verbose_name': '[성적예측] 10_답안 개수(하위권)',
                'verbose_name_plural': '[성적예측] 10_답안 개수(하위권)',
                'db_table': 'a_prime_predict_answer_count_low_rank',
            },
        ),
        migrations.CreateModel(
            name='PredictAnswerCountMidRank',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('count_1', models.IntegerField(default=0, verbose_name='①')),
                ('count_2', models.IntegerField(default=0, verbose_name='②')),
                ('count_3', models.IntegerField(default=0, verbose_name='③')),
                ('count_4', models.IntegerField(default=0, verbose_name='④')),
                ('count_5', models.IntegerField(default=0, verbose_name='⑤')),
                ('count_0', models.IntegerField(default=0, verbose_name='미표기')),
                ('count_multiple', models.IntegerField(default=0, verbose_name='중복표기')),
                ('count_sum', models.IntegerField(default=0, verbose_name='총계')),
                ('filtered_count_1', models.IntegerField(default=0, verbose_name='[필터링]①')),
                ('filtered_count_2', models.IntegerField(default=0, verbose_name='[필터링]②')),
                ('filtered_count_3', models.IntegerField(default=0, verbose_name='[필터링]③')),
                ('filtered_count_4', models.IntegerField(default=0, verbose_name='[필터링]④')),
                ('filtered_count_5', models.IntegerField(default=0, verbose_name='[필터링]⑤')),
                ('filtered_count_0', models.IntegerField(default=0, verbose_name='[필터링]미표기')),
                ('filtered_count_multiple', models.IntegerField(default=0, verbose_name='[필터링]중복표기')),
                ('filtered_count_sum', models.IntegerField(default=0, verbose_name='[필터링]총계')),
                ('problem', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='predict_answer_count_mid_rank', to='a_prime.problem')),
            ],
            options={
                'verbose_name': '[성적예측] 09_답안 개수(중위권)',
                'verbose_name_plural': '[성적예측] 09_답안 개수(중위권)',
                'db_table': 'a_prime_predict_answer_count_mid_rank',
            },
        ),
        migrations.CreateModel(
            name='PredictAnswerCountTopRank',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('count_1', models.IntegerField(default=0, verbose_name='①')),
                ('count_2', models.IntegerField(default=0, verbose_name='②')),
                ('count_3', models.IntegerField(default=0, verbose_name='③')),
                ('count_4', models.IntegerField(default=0, verbose_name='④')),
                ('count_5', models.IntegerField(default=0, verbose_name='⑤')),
                ('count_0', models.IntegerField(default=0, verbose_name='미표기')),
                ('count_multiple', models.IntegerField(default=0, verbose_name='중복표기')),
                ('count_sum', models.IntegerField(default=0, verbose_name='총계')),
                ('filtered_count_1', models.IntegerField(default=0, verbose_name='[필터링]①')),
                ('filtered_count_2', models.IntegerField(default=0, verbose_name='[필터링]②')),
                ('filtered_count_3', models.IntegerField(default=0, verbose_name='[필터링]③')),
                ('filtered_count_4', models.IntegerField(default=0, verbose_name='[필터링]④')),
                ('filtered_count_5', models.IntegerField(default=0, verbose_name='[필터링]⑤')),
                ('filtered_count_0', models.IntegerField(default=0, verbose_name='[필터링]미표기')),
                ('filtered_count_multiple', models.IntegerField(default=0, verbose_name='[필터링]중복표기')),
                ('filtered_count_sum', models.IntegerField(default=0, verbose_name='[필터링]총계')),
                ('problem', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='predict_answer_count_top_rank', to='a_prime.problem')),
            ],
            options={
                'verbose_name': '[성적예측] 08_답안 개수(상위권)',
                'verbose_name_plural': '[성적예측] 08_답안 개수(상위권)',
                'db_table': 'a_prime_predict_answer_count_top_rank',
            },
        ),
        migrations.CreateModel(
            name='PredictStudent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='생성 일시')),
                ('name', models.CharField(max_length=20, verbose_name='이름')),
                ('serial', models.CharField(max_length=10, verbose_name='수험번호')),
                ('password', models.CharField(default=0, max_length=10, verbose_name='비밀번호')),
                ('is_filtered', models.BooleanField(default=False, verbose_name='필터링 여부')),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='predict_students', to='a_prime.category')),
                ('psat', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='predict_students', to='a_prime.psat')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='prime_predict_students', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': '[성적예측] 01_수험정보',
                'verbose_name_plural': '[성적예측] 01_수험정보',
                'db_table': 'a_prime_predict_student',
            },
        ),
        migrations.CreateModel(
            name='PredictScore',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('subject_0', models.FloatField(blank=True, null=True, verbose_name='헌법')),
                ('subject_1', models.FloatField(blank=True, null=True, verbose_name='언어논리')),
                ('subject_2', models.FloatField(blank=True, null=True, verbose_name='자료해석')),
                ('subject_3', models.FloatField(blank=True, null=True, verbose_name='상황판단')),
                ('sum', models.FloatField(blank=True, null=True, verbose_name='PSAT 총점')),
                ('average', models.FloatField(blank=True, null=True, verbose_name='PSAT 평균')),
                ('student', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='score', to='a_prime.predictstudent')),
            ],
            options={
                'verbose_name': '[성적예측] 05_점수',
                'verbose_name_plural': '[성적예측] 05_점수',
                'db_table': 'a_prime_predict_score',
            },
        ),
        migrations.CreateModel(
            name='PredictRankTotal',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('subject_0', models.IntegerField(blank=True, null=True, verbose_name='헌법')),
                ('subject_1', models.IntegerField(blank=True, null=True, verbose_name='언어논리')),
                ('subject_2', models.IntegerField(blank=True, null=True, verbose_name='자료해석')),
                ('subject_3', models.IntegerField(blank=True, null=True, verbose_name='상황판단')),
                ('average', models.IntegerField(blank=True, null=True, verbose_name='PSAT')),
                ('participants', models.IntegerField(blank=True, null=True, verbose_name='총 인원')),
                ('filtered_subject_0', models.IntegerField(blank=True, null=True, verbose_name='[필터링]헌법')),
                ('filtered_subject_1', models.IntegerField(blank=True, null=True, verbose_name='[필터링]언어논리')),
                ('filtered_subject_2', models.IntegerField(blank=True, null=True, verbose_name='[필터링]자료해석')),
                ('filtered_subject_3', models.IntegerField(blank=True, null=True, verbose_name='[필터링]상황판단')),
                ('filtered_average', models.IntegerField(blank=True, null=True, verbose_name='[필터링]PSAT')),
                ('filtered_participants', models.IntegerField(blank=True, null=True, verbose_name='[필터링]총 인원')),
                ('student', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='rank_total', to='a_prime.predictstudent')),
            ],
            options={
                'verbose_name': '[성적예측] 06_전체 등수',
                'verbose_name_plural': '[성적예측] 06_전체 등수',
                'db_table': 'a_prime_predict_rank_total',
            },
        ),
        migrations.CreateModel(
            name='PredictRankCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('subject_0', models.IntegerField(blank=True, null=True, verbose_name='헌법')),
                ('subject_1', models.IntegerField(blank=True, null=True, verbose_name='언어논리')),
                ('subject_2', models.IntegerField(blank=True, null=True, verbose_name='자료해석')),
                ('subject_3', models.IntegerField(blank=True, null=True, verbose_name='상황판단')),
                ('average', models.IntegerField(blank=True, null=True, verbose_name='PSAT')),
                ('participants', models.IntegerField(blank=True, null=True, verbose_name='총 인원')),
                ('filtered_subject_0', models.IntegerField(blank=True, null=True, verbose_name='[필터링]헌법')),
                ('filtered_subject_1', models.IntegerField(blank=True, null=True, verbose_name='[필터링]언어논리')),
                ('filtered_subject_2', models.IntegerField(blank=True, null=True, verbose_name='[필터링]자료해석')),
                ('filtered_subject_3', models.IntegerField(blank=True, null=True, verbose_name='[필터링]상황판단')),
                ('filtered_average', models.IntegerField(blank=True, null=True, verbose_name='[필터링]PSAT')),
                ('filtered_participants', models.IntegerField(blank=True, null=True, verbose_name='[필터링]총 인원')),
                ('student', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='rank_category', to='a_prime.predictstudent')),
            ],
            options={
                'verbose_name': '[성적예측] 07_직렬 등수',
                'verbose_name_plural': '[성적예측] 07_직렬 등수',
                'db_table': 'a_prime_predict_rank_category',
            },
        ),
        migrations.CreateModel(
            name='PredictAnswer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('answer', models.IntegerField(choices=a_prime.models.choices.answer_choice, default=1, verbose_name='답안')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='작성 일시')),
                ('problem', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='predict_answers', to='a_prime.problem')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='answers', to='a_prime.predictstudent')),
            ],
            options={
                'verbose_name': '[성적예측] 03_답안',
                'verbose_name_plural': '[성적예측] 03_답안',
                'db_table': 'a_prime_predict_answer',
            },
        ),
        migrations.CreateModel(
            name='PredictStatistics',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('department', models.CharField(choices=a_prime.models.choices.statistics_department_choice, default='전체', max_length=40, verbose_name='직렬')),
                ('subject_0', models.JSONField(default=a_prime.models.abstract_models.get_default_statistics, verbose_name='헌법')),
                ('subject_1', models.JSONField(default=a_prime.models.abstract_models.get_default_statistics, verbose_name='언어논리')),
                ('subject_2', models.JSONField(default=a_prime.models.abstract_models.get_default_statistics, verbose_name='자료해석')),
                ('subject_3', models.JSONField(default=a_prime.models.abstract_models.get_default_statistics, verbose_name='상황판단')),
                ('average', models.JSONField(default=a_prime.models.abstract_models.get_default_statistics, verbose_name='PSAT')),
                ('filtered_subject_0', models.JSONField(default=a_prime.models.abstract_models.get_default_statistics, verbose_name='[필터링]헌법')),
                ('filtered_subject_1', models.JSONField(default=a_prime.models.abstract_models.get_default_statistics, verbose_name='[필터링]언어논리')),
                ('filtered_subject_2', models.JSONField(default=a_prime.models.abstract_models.get_default_statistics, verbose_name='[필터링]자료해석')),
                ('filtered_subject_3', models.JSONField(default=a_prime.models.abstract_models.get_default_statistics, verbose_name='[필터링]상황판단')),
                ('filtered_average', models.JSONField(default=a_prime.models.abstract_models.get_default_statistics, verbose_name='[필터링]PSAT')),
                ('psat', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='predict_statistics', to='a_prime.psat')),
            ],
            options={
                'verbose_name': '[성적예측] 00_시험통계',
                'verbose_name_plural': '[성적예측] 00_시험통계',
                'db_table': 'a_prime_predict_statistics',
                'constraints': [models.UniqueConstraint(fields=('psat', 'department'), name='unique_prime_predict_statistics')],
            },
        ),
        migrations.AddConstraint(
            model_name='predictstudent',
            constraint=models.UniqueConstraint(fields=('psat', 'category', 'user', 'name', 'serial'), name='unique_prime_predict_student'),
        ),
        migrations.AddConstraint(
            model_name='predictanswer',
            constraint=models.UniqueConstraint(fields=('student', 'problem'), name='unique_prime_predict_answer'),
        ),
    ]
