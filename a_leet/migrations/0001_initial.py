# Generated by Django 5.2 on 2025-07-04 13:24

import a_leet.models.abstract_models
import a_leet.models.choices
import ckeditor.fields
import django.db.models.deletion
import django.db.models.functions.comparison
import django.utils.timezone
import taggit.managers
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='ProblemTag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True, verbose_name='name')),
                ('slug', models.SlugField(allow_unicode=True, max_length=100, unique=True, verbose_name='slug')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': '[기출문제] 07_태그',
                'verbose_name_plural': '[기출문제] 07_태그',
                'db_table': 'a_leet_problem_tag',
            },
        ),
        migrations.CreateModel(
            name='Leet',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('year', models.PositiveSmallIntegerField(choices=a_leet.models.choices.year_choice, default=2026, verbose_name='연도')),
                ('exam', models.CharField(choices=a_leet.models.choices.exam_choice, default='리트', max_length=2, verbose_name='시험')),
                ('is_active', models.BooleanField(default=False, verbose_name='활성')),
            ],
            options={
                'verbose_name': '[기출문제] 00_LEET',
                'verbose_name_plural': '[기출문제] 00_LEET',
                'ordering': ['-year'],
                'constraints': [models.UniqueConstraint(fields=('year', 'exam'), name='unique_leet_official_leet')],
            },
        ),
        migrations.CreateModel(
            name='PredictLeet',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=False, verbose_name='활성')),
                ('page_opened_at', models.DateTimeField(default=django.utils.timezone.now, verbose_name='페이지 오픈 일시')),
                ('exam_started_at', models.DateTimeField(default=django.utils.timezone.now, verbose_name='시험 시작 일시')),
                ('exam_finished_at', models.DateTimeField(default=django.utils.timezone.now, verbose_name='시험 종료 일시')),
                ('answer_predict_opened_at', models.DateTimeField(default=django.utils.timezone.now, verbose_name='예상 정답 공개 일시')),
                ('answer_official_opened_at', models.DateTimeField(default=django.utils.timezone.now, verbose_name='공식 정답 공개 일시')),
                ('predict_closed_at', models.DateTimeField(default=django.utils.timezone.now, verbose_name='합격 에측 종료 일시')),
                ('leet', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='predict_leet', to='a_leet.leet')),
            ],
            options={
                'verbose_name': '[합격예측] 00_LEET',
                'verbose_name_plural': '[합격예측] 00_LEET',
                'db_table': 'a_leet_predict_leet',
                'ordering': ['-id'],
            },
        ),
        migrations.CreateModel(
            name='PredictStudent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='생성 일시')),
                ('serial', models.CharField(max_length=10, verbose_name='수험번호')),
                ('name', models.CharField(max_length=20, verbose_name='이름')),
                ('password', models.CharField(blank=True, max_length=10, null=True, verbose_name='비밀번호')),
                ('aspiration_1', models.CharField(blank=True, choices=a_leet.models.choices.university_choice, max_length=10, null=True, verbose_name='1지망')),
                ('aspiration_2', models.CharField(blank=True, choices=a_leet.models.choices.university_choice, max_length=10, null=True, verbose_name='2지망')),
                ('school', models.CharField(blank=True, choices=a_leet.models.choices.university_choice, max_length=10, null=True, verbose_name='출신대학')),
                ('major', models.CharField(blank=True, choices=a_leet.models.choices.major_choice, max_length=5, null=True, verbose_name='전공')),
                ('gpa_type', models.FloatField(blank=True, choices=a_leet.models.choices.gpa_type_choice, null=True, verbose_name='학점(GPA) 종류')),
                ('gpa', models.FloatField(blank=True, null=True, verbose_name='학점(GPA)')),
                ('english_type', models.CharField(blank=True, choices=a_leet.models.choices.english_type_choice, max_length=10, null=True, verbose_name='공인 영어성적 종류')),
                ('english', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='공인 영어성적')),
                ('is_filtered', models.BooleanField(default=False, verbose_name='필터링 여부')),
                ('leet', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='predict_students', to='a_leet.leet')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='leet_predict_students', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': '[합격예측] 02_수험정보',
                'verbose_name_plural': '[합격예측] 02_수험정보',
                'db_table': 'a_leet_predict_student',
            },
        ),
        migrations.CreateModel(
            name='PredictScore',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('raw_subject_0', models.IntegerField(blank=True, null=True, verbose_name='언어이해 원점수')),
                ('raw_subject_1', models.IntegerField(blank=True, null=True, verbose_name='추리논증 원점수')),
                ('raw_sum', models.IntegerField(blank=True, null=True, verbose_name='총점 원점수')),
                ('subject_0', models.FloatField(blank=True, null=True, verbose_name='언어이해 표준점수')),
                ('subject_1', models.FloatField(blank=True, null=True, verbose_name='추리논증 표준점수')),
                ('sum', models.FloatField(blank=True, null=True, verbose_name='총점 표준점수')),
                ('student', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='score', to='a_leet.predictstudent')),
            ],
            options={
                'verbose_name': '[합격예측] 05_점수',
                'verbose_name_plural': '[합격예측] 05_점수',
                'db_table': 'a_leet_predict_score',
            },
        ),
        migrations.CreateModel(
            name='PredictRankAspiration2',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('subject_0', models.IntegerField(blank=True, null=True, verbose_name='언어이해 등수')),
                ('subject_1', models.IntegerField(blank=True, null=True, verbose_name='추리논증 등수')),
                ('sum', models.IntegerField(blank=True, null=True, verbose_name='총점 등수')),
                ('participants', models.IntegerField(blank=True, null=True, verbose_name='총 인원')),
                ('filtered_subject_0', models.IntegerField(blank=True, null=True, verbose_name='[필터링]언어이해 등수')),
                ('filtered_subject_1', models.IntegerField(blank=True, null=True, verbose_name='[필터링]추리논증 등수')),
                ('filtered_sum', models.IntegerField(blank=True, null=True, verbose_name='[필터링]총점 등수')),
                ('filtered_participants', models.IntegerField(blank=True, null=True, verbose_name='[필터링]총 인원')),
                ('student', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='rank_aspiration_2', to='a_leet.predictstudent')),
            ],
            options={
                'verbose_name': '[합격예측] 08_등수(2지망)',
                'verbose_name_plural': '[합격예측] 08_등수(2지망)',
                'db_table': 'a_leet_predict_rank_aspiration_2',
            },
        ),
        migrations.CreateModel(
            name='PredictRankAspiration1',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('subject_0', models.IntegerField(blank=True, null=True, verbose_name='언어이해 등수')),
                ('subject_1', models.IntegerField(blank=True, null=True, verbose_name='추리논증 등수')),
                ('sum', models.IntegerField(blank=True, null=True, verbose_name='총점 등수')),
                ('participants', models.IntegerField(blank=True, null=True, verbose_name='총 인원')),
                ('filtered_subject_0', models.IntegerField(blank=True, null=True, verbose_name='[필터링]언어이해 등수')),
                ('filtered_subject_1', models.IntegerField(blank=True, null=True, verbose_name='[필터링]추리논증 등수')),
                ('filtered_sum', models.IntegerField(blank=True, null=True, verbose_name='[필터링]총점 등수')),
                ('filtered_participants', models.IntegerField(blank=True, null=True, verbose_name='[필터링]총 인원')),
                ('student', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='rank_aspiration_1', to='a_leet.predictstudent')),
            ],
            options={
                'verbose_name': '[합격예측] 07_등수(1지망)',
                'verbose_name_plural': '[합격예측] 07_등수(1지망)',
                'db_table': 'a_leet_predict_rank_aspiration_1',
            },
        ),
        migrations.CreateModel(
            name='PredictRank',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('subject_0', models.IntegerField(blank=True, null=True, verbose_name='언어이해 등수')),
                ('subject_1', models.IntegerField(blank=True, null=True, verbose_name='추리논증 등수')),
                ('sum', models.IntegerField(blank=True, null=True, verbose_name='총점 등수')),
                ('participants', models.IntegerField(blank=True, null=True, verbose_name='총 인원')),
                ('filtered_subject_0', models.IntegerField(blank=True, null=True, verbose_name='[필터링]언어이해 등수')),
                ('filtered_subject_1', models.IntegerField(blank=True, null=True, verbose_name='[필터링]추리논증 등수')),
                ('filtered_sum', models.IntegerField(blank=True, null=True, verbose_name='[필터링]총점 등수')),
                ('filtered_participants', models.IntegerField(blank=True, null=True, verbose_name='[필터링]총 인원')),
                ('student', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='rank', to='a_leet.predictstudent')),
            ],
            options={
                'verbose_name': '[합격예측] 06_등수(전체)',
                'verbose_name_plural': '[합격예측] 06_등수(전체)',
                'db_table': 'a_leet_predict_rank',
            },
        ),
        migrations.CreateModel(
            name='Problem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('subject', models.CharField(choices=a_leet.models.choices.subject_choice, default='언어', max_length=2, verbose_name='과목')),
                ('paper_type', models.CharField(default='', max_length=2, verbose_name='책형')),
                ('number', models.IntegerField(choices=a_leet.models.choices.number_choice, default=1, verbose_name='번호')),
                ('answer', models.IntegerField(choices=a_leet.models.choices.answer_choice, default=1, verbose_name='정답')),
                ('question', models.TextField(default='', verbose_name='발문')),
                ('data', models.TextField(default='', verbose_name='자료')),
                ('leet', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='problems', to='a_leet.leet', verbose_name='LEET')),
            ],
            options={
                'verbose_name': '[기출문제] 01_문제',
                'verbose_name_plural': '[기출문제] 01_문제',
                'ordering': ['leet', 'id'],
            },
        ),
        migrations.CreateModel(
            name='PredictAnswerCountTopRank',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('count_1', models.IntegerField(default=0, verbose_name='①')),
                ('count_2', models.IntegerField(default=0, verbose_name='②')),
                ('count_3', models.IntegerField(default=0, verbose_name='③')),
                ('count_4', models.IntegerField(default=0, verbose_name='④')),
                ('count_5', models.IntegerField(default=0, verbose_name='⑤')),
                ('count_0', models.IntegerField(default=0, verbose_name='미표기')),
                ('count_multiple', models.IntegerField(default=0, verbose_name='중복표기')),
                ('count_sum', models.IntegerField(default=0, verbose_name='총계')),
                ('answer_predict', models.GeneratedField(db_persist=True, expression=models.Case(models.When(models.Q(('count_1', django.db.models.functions.comparison.Greatest('count_1', 'count_2', 'count_3', 'count_4', 'count_5'))), then=models.Value(1)), models.When(models.Q(('count_2', django.db.models.functions.comparison.Greatest('count_1', 'count_2', 'count_3', 'count_4', 'count_5'))), then=models.Value(2)), models.When(models.Q(('count_3', django.db.models.functions.comparison.Greatest('count_1', 'count_2', 'count_3', 'count_4', 'count_5'))), then=models.Value(3)), models.When(models.Q(('count_4', django.db.models.functions.comparison.Greatest('count_1', 'count_2', 'count_3', 'count_4', 'count_5'))), then=models.Value(4)), models.When(models.Q(('count_5', django.db.models.functions.comparison.Greatest('count_1', 'count_2', 'count_3', 'count_4', 'count_5'))), then=models.Value(5)), default=None), output_field=models.IntegerField())),
                ('filtered_count_1', models.IntegerField(default=0, verbose_name='[필터링]①')),
                ('filtered_count_2', models.IntegerField(default=0, verbose_name='[필터링]②')),
                ('filtered_count_3', models.IntegerField(default=0, verbose_name='[필터링]③')),
                ('filtered_count_4', models.IntegerField(default=0, verbose_name='[필터링]④')),
                ('filtered_count_5', models.IntegerField(default=0, verbose_name='[필터링]⑤')),
                ('filtered_count_0', models.IntegerField(default=0, verbose_name='[필터링]미표기')),
                ('filtered_count_multiple', models.IntegerField(default=0, verbose_name='[필터링]중복표기')),
                ('filtered_count_sum', models.IntegerField(default=0, verbose_name='[필터링]총계')),
                ('problem', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='predict_answer_count_top_rank', to='a_leet.problem')),
            ],
            options={
                'verbose_name': '[합격예측] 09_답안 개수(상위권)',
                'verbose_name_plural': '[합격예측] 09_답안 개수(상위권)',
                'db_table': 'a_leet_predict_answer_count_top_rank',
            },
        ),
        migrations.CreateModel(
            name='PredictAnswerCountMidRank',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('count_1', models.IntegerField(default=0, verbose_name='①')),
                ('count_2', models.IntegerField(default=0, verbose_name='②')),
                ('count_3', models.IntegerField(default=0, verbose_name='③')),
                ('count_4', models.IntegerField(default=0, verbose_name='④')),
                ('count_5', models.IntegerField(default=0, verbose_name='⑤')),
                ('count_0', models.IntegerField(default=0, verbose_name='미표기')),
                ('count_multiple', models.IntegerField(default=0, verbose_name='중복표기')),
                ('count_sum', models.IntegerField(default=0, verbose_name='총계')),
                ('answer_predict', models.GeneratedField(db_persist=True, expression=models.Case(models.When(models.Q(('count_1', django.db.models.functions.comparison.Greatest('count_1', 'count_2', 'count_3', 'count_4', 'count_5'))), then=models.Value(1)), models.When(models.Q(('count_2', django.db.models.functions.comparison.Greatest('count_1', 'count_2', 'count_3', 'count_4', 'count_5'))), then=models.Value(2)), models.When(models.Q(('count_3', django.db.models.functions.comparison.Greatest('count_1', 'count_2', 'count_3', 'count_4', 'count_5'))), then=models.Value(3)), models.When(models.Q(('count_4', django.db.models.functions.comparison.Greatest('count_1', 'count_2', 'count_3', 'count_4', 'count_5'))), then=models.Value(4)), models.When(models.Q(('count_5', django.db.models.functions.comparison.Greatest('count_1', 'count_2', 'count_3', 'count_4', 'count_5'))), then=models.Value(5)), default=None), output_field=models.IntegerField())),
                ('filtered_count_1', models.IntegerField(default=0, verbose_name='[필터링]①')),
                ('filtered_count_2', models.IntegerField(default=0, verbose_name='[필터링]②')),
                ('filtered_count_3', models.IntegerField(default=0, verbose_name='[필터링]③')),
                ('filtered_count_4', models.IntegerField(default=0, verbose_name='[필터링]④')),
                ('filtered_count_5', models.IntegerField(default=0, verbose_name='[필터링]⑤')),
                ('filtered_count_0', models.IntegerField(default=0, verbose_name='[필터링]미표기')),
                ('filtered_count_multiple', models.IntegerField(default=0, verbose_name='[필터링]중복표기')),
                ('filtered_count_sum', models.IntegerField(default=0, verbose_name='[필터링]총계')),
                ('problem', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='predict_answer_count_mid_rank', to='a_leet.problem')),
            ],
            options={
                'verbose_name': '[합격예측] 10_답안 개수(중위권)',
                'verbose_name_plural': '[합격예측] 10_답안 개수(중위권)',
                'db_table': 'a_leet_predict_answer_count_mid_rank',
            },
        ),
        migrations.CreateModel(
            name='PredictAnswerCountLowRank',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('count_1', models.IntegerField(default=0, verbose_name='①')),
                ('count_2', models.IntegerField(default=0, verbose_name='②')),
                ('count_3', models.IntegerField(default=0, verbose_name='③')),
                ('count_4', models.IntegerField(default=0, verbose_name='④')),
                ('count_5', models.IntegerField(default=0, verbose_name='⑤')),
                ('count_0', models.IntegerField(default=0, verbose_name='미표기')),
                ('count_multiple', models.IntegerField(default=0, verbose_name='중복표기')),
                ('count_sum', models.IntegerField(default=0, verbose_name='총계')),
                ('answer_predict', models.GeneratedField(db_persist=True, expression=models.Case(models.When(models.Q(('count_1', django.db.models.functions.comparison.Greatest('count_1', 'count_2', 'count_3', 'count_4', 'count_5'))), then=models.Value(1)), models.When(models.Q(('count_2', django.db.models.functions.comparison.Greatest('count_1', 'count_2', 'count_3', 'count_4', 'count_5'))), then=models.Value(2)), models.When(models.Q(('count_3', django.db.models.functions.comparison.Greatest('count_1', 'count_2', 'count_3', 'count_4', 'count_5'))), then=models.Value(3)), models.When(models.Q(('count_4', django.db.models.functions.comparison.Greatest('count_1', 'count_2', 'count_3', 'count_4', 'count_5'))), then=models.Value(4)), models.When(models.Q(('count_5', django.db.models.functions.comparison.Greatest('count_1', 'count_2', 'count_3', 'count_4', 'count_5'))), then=models.Value(5)), default=None), output_field=models.IntegerField())),
                ('filtered_count_1', models.IntegerField(default=0, verbose_name='[필터링]①')),
                ('filtered_count_2', models.IntegerField(default=0, verbose_name='[필터링]②')),
                ('filtered_count_3', models.IntegerField(default=0, verbose_name='[필터링]③')),
                ('filtered_count_4', models.IntegerField(default=0, verbose_name='[필터링]④')),
                ('filtered_count_5', models.IntegerField(default=0, verbose_name='[필터링]⑤')),
                ('filtered_count_0', models.IntegerField(default=0, verbose_name='[필터링]미표기')),
                ('filtered_count_multiple', models.IntegerField(default=0, verbose_name='[필터링]중복표기')),
                ('filtered_count_sum', models.IntegerField(default=0, verbose_name='[필터링]총계')),
                ('problem', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='predict_answer_count_low_rank', to='a_leet.problem')),
            ],
            options={
                'verbose_name': '[합격예측] 11_답안 개수(하위권)',
                'verbose_name_plural': '[합격예측] 11_답안 개수(하위권)',
                'db_table': 'a_leet_predict_answer_count_low_rank',
            },
        ),
        migrations.CreateModel(
            name='PredictAnswerCount',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('count_1', models.IntegerField(default=0, verbose_name='①')),
                ('count_2', models.IntegerField(default=0, verbose_name='②')),
                ('count_3', models.IntegerField(default=0, verbose_name='③')),
                ('count_4', models.IntegerField(default=0, verbose_name='④')),
                ('count_5', models.IntegerField(default=0, verbose_name='⑤')),
                ('count_0', models.IntegerField(default=0, verbose_name='미표기')),
                ('count_multiple', models.IntegerField(default=0, verbose_name='중복표기')),
                ('count_sum', models.IntegerField(default=0, verbose_name='총계')),
                ('answer_predict', models.GeneratedField(db_persist=True, expression=models.Case(models.When(models.Q(('count_1', django.db.models.functions.comparison.Greatest('count_1', 'count_2', 'count_3', 'count_4', 'count_5'))), then=models.Value(1)), models.When(models.Q(('count_2', django.db.models.functions.comparison.Greatest('count_1', 'count_2', 'count_3', 'count_4', 'count_5'))), then=models.Value(2)), models.When(models.Q(('count_3', django.db.models.functions.comparison.Greatest('count_1', 'count_2', 'count_3', 'count_4', 'count_5'))), then=models.Value(3)), models.When(models.Q(('count_4', django.db.models.functions.comparison.Greatest('count_1', 'count_2', 'count_3', 'count_4', 'count_5'))), then=models.Value(4)), models.When(models.Q(('count_5', django.db.models.functions.comparison.Greatest('count_1', 'count_2', 'count_3', 'count_4', 'count_5'))), then=models.Value(5)), default=None), output_field=models.IntegerField())),
                ('filtered_count_1', models.IntegerField(default=0, verbose_name='[필터링]①')),
                ('filtered_count_2', models.IntegerField(default=0, verbose_name='[필터링]②')),
                ('filtered_count_3', models.IntegerField(default=0, verbose_name='[필터링]③')),
                ('filtered_count_4', models.IntegerField(default=0, verbose_name='[필터링]④')),
                ('filtered_count_5', models.IntegerField(default=0, verbose_name='[필터링]⑤')),
                ('filtered_count_0', models.IntegerField(default=0, verbose_name='[필터링]미표기')),
                ('filtered_count_multiple', models.IntegerField(default=0, verbose_name='[필터링]중복표기')),
                ('filtered_count_sum', models.IntegerField(default=0, verbose_name='[필터링]총계')),
                ('problem', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='predict_answer_count', to='a_leet.problem')),
            ],
            options={
                'verbose_name': '[합격예측] 04_답안 개수',
                'verbose_name_plural': '[합격예측] 04_답안 개수',
                'db_table': 'a_leet_predict_answer_count',
            },
        ),
        migrations.CreateModel(
            name='PredictAnswer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='작성 일시')),
                ('answer', models.IntegerField(choices=a_leet.models.choices.answer_choice, default=1, verbose_name='답안')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='answers', to='a_leet.predictstudent')),
                ('problem', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='predict_answers', to='a_leet.problem')),
            ],
            options={
                'verbose_name': '[합격예측] 03_답안',
                'verbose_name_plural': '[합격예측] 03_답안',
                'db_table': 'a_leet_predict_answer',
            },
        ),
        migrations.CreateModel(
            name='ProblemAnnotation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('annotate_type', models.CharField(max_length=50)),
                ('image', models.ImageField(upload_to='annotations/')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('problem', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='annotations', to='a_leet.problem')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='leet_problem_annotations', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'a_leet_problem_annotation',
                'ordering': ['-id'],
            },
        ),
        migrations.CreateModel(
            name='ProblemCollection',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=20)),
                ('order', models.IntegerField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('is_active', models.BooleanField(default=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='leet_problem_collections', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': '[기출문제] 09_컬렉션',
                'verbose_name_plural': '[기출문제] 09_컬렉션',
                'db_table': 'a_leet_problem_collection',
                'ordering': ['-id'],
            },
        ),
        migrations.CreateModel(
            name='ProblemCollectionItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order', models.IntegerField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('is_active', models.BooleanField(default=True)),
                ('collection', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='collection_items', to='a_leet.problemcollection')),
                ('problem', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='collected_problems', to='a_leet.problem')),
            ],
            options={
                'verbose_name': '[기출문제] 10_컬렉션 문제',
                'verbose_name_plural': '[기출문제] 10_컬렉션 문제',
                'db_table': 'a_leet_problem_collection_item',
                'ordering': ['-id'],
            },
        ),
        migrations.AddField(
            model_name='problem',
            name='collections',
            field=models.ManyToManyField(related_name='collected_leet_problems', through='a_leet.ProblemCollectionItem', to='a_leet.problemcollection'),
        ),
        migrations.CreateModel(
            name='ProblemComment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField()),
                ('hit', models.IntegerField(default=1, verbose_name='조회수')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='reply_comments', to='a_leet.problemcomment')),
                ('problem', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='a_leet.problem')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='leet_problem_comments', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'a_leet_problem_comment',
                'ordering': ['-id'],
            },
        ),
        migrations.AddField(
            model_name='problem',
            name='comment_users',
            field=models.ManyToManyField(related_name='commented_leet_problems', through='a_leet.ProblemComment', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='ProblemCommentLike',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_liked', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('remarks', models.TextField(blank=True, null=True)),
                ('comment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='likes', to='a_leet.problemcomment')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='leet_problem_comment_likes', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'a_leet_problem_comment_like',
            },
        ),
        migrations.AddField(
            model_name='problemcomment',
            name='like_users',
            field=models.ManyToManyField(related_name='liked_leet_problem_comments', through='a_leet.ProblemCommentLike', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='ProblemLike',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_liked', models.BooleanField(default=True)),
                ('problem', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='likes', to='a_leet.problem')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='leet_problem_likes', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': '[기출문제] 03_즐겨찾기',
                'verbose_name_plural': '[기출문제] 03_즐겨찾기',
                'db_table': 'a_leet_problem_like',
                'ordering': ['-id'],
            },
        ),
        migrations.AddField(
            model_name='problem',
            name='like_users',
            field=models.ManyToManyField(related_name='liked_leet_problems', through='a_leet.ProblemLike', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='ProblemMemo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('is_active', models.BooleanField(default=True)),
                ('content', ckeditor.fields.RichTextField()),
                ('problem', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='memos', to='a_leet.problem')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='leet_problem_memos', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': '[기출문제] 06_메모',
                'verbose_name_plural': '[기출문제] 06_메모',
                'db_table': 'a_leet_problem_memo',
                'ordering': ['-id'],
            },
        ),
        migrations.AddField(
            model_name='problem',
            name='memo_users',
            field=models.ManyToManyField(related_name='memoed_leet_problems', through='a_leet.ProblemMemo', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='ProblemOpen',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_id', models.IntegerField(blank=True, null=True)),
                ('ip_address', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('problem', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='a_leet.problem')),
            ],
            options={
                'verbose_name': '[기출문제] 02_확인기록',
                'verbose_name_plural': '[기출문제] 02_확인기록',
                'db_table': 'a_leet_problem_open',
                'ordering': ['-id'],
            },
        ),
        migrations.CreateModel(
            name='ProblemRate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('is_active', models.BooleanField(default=True)),
                ('rating', models.IntegerField(choices=[(1, '⭐️'), (2, '⭐️⭐️'), (3, '⭐️⭐️⭐️'), (4, '⭐️⭐️⭐️⭐️'), (5, '⭐️⭐️⭐️⭐️⭐️')])),
                ('problem', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='rates', to='a_leet.problem')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='leet_problem_rates', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': '[기출문제] 04_난이도',
                'verbose_name_plural': '[기출문제] 04_난이도',
                'db_table': 'a_leet_problem_rate',
                'ordering': ['-id'],
            },
        ),
        migrations.AddField(
            model_name='problem',
            name='rate_users',
            field=models.ManyToManyField(related_name='rated_leet_problems', through='a_leet.ProblemRate', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='ProblemSolve',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('is_active', models.BooleanField(default=True)),
                ('answer', models.IntegerField(choices=[(1, '①'), (2, '②'), (3, '③'), (4, '④'), (5, '⑤')])),
                ('is_correct', models.BooleanField()),
                ('problem', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='solves', to='a_leet.problem')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='leet_problem_solves', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': '[기출문제] 05_정답확인',
                'verbose_name_plural': '[기출문제] 05_정답확인',
                'db_table': 'a_leet_problem_solve',
                'ordering': ['-id'],
            },
        ),
        migrations.AddField(
            model_name='problem',
            name='solve_users',
            field=models.ManyToManyField(related_name='solved_leet_problems', through='a_leet.ProblemSolve', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='ProblemTaggedItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('content_object', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tagged_problems', to='a_leet.problem')),
                ('tag', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tagged_items', to='a_leet.problemtag')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='leet_tagged_items', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': '[기출문제] 08_태그된 문제',
                'verbose_name_plural': '[기출문제] 08_태그된 문제',
                'db_table': 'a_leet_problem_tagged_item',
                'ordering': ['-id'],
            },
        ),
        migrations.AddField(
            model_name='problem',
            name='tags',
            field=taggit.managers.TaggableManager(blank=True, help_text='A comma-separated list of tags.', through='a_leet.ProblemTaggedItem', to='a_leet.ProblemTag', verbose_name='Tags'),
        ),
        migrations.CreateModel(
            name='PredictStatistics',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('aspiration', models.CharField(choices=a_leet.models.choices.statistics_aspiration_choice, default='전체', max_length=10, verbose_name='지망 대학')),
                ('raw_subject_0', models.JSONField(default=a_leet.models.abstract_models.get_default_statistics, verbose_name='언어이해 원점수')),
                ('raw_subject_1', models.JSONField(default=a_leet.models.abstract_models.get_default_statistics, verbose_name='추리논증 원점수')),
                ('raw_sum', models.JSONField(default=a_leet.models.abstract_models.get_default_statistics, verbose_name='총점 원점수')),
                ('subject_0', models.JSONField(default=a_leet.models.abstract_models.get_default_statistics, verbose_name='언어이해 표준점수')),
                ('subject_1', models.JSONField(default=a_leet.models.abstract_models.get_default_statistics, verbose_name='추리논증 표준점수')),
                ('sum', models.JSONField(default=a_leet.models.abstract_models.get_default_statistics, verbose_name='총점 표준점수')),
                ('filtered_raw_subject_0', models.JSONField(default=a_leet.models.abstract_models.get_default_statistics, verbose_name='[필터링]언어이해 원점수')),
                ('filtered_raw_subject_1', models.JSONField(default=a_leet.models.abstract_models.get_default_statistics, verbose_name='[필터링]추리논증 원점수')),
                ('filtered_raw_sum', models.JSONField(default=a_leet.models.abstract_models.get_default_statistics, verbose_name='[필터링]총점 원점수')),
                ('filtered_subject_0', models.JSONField(default=a_leet.models.abstract_models.get_default_statistics, verbose_name='[필터링]언어이해 표준점수')),
                ('filtered_subject_1', models.JSONField(default=a_leet.models.abstract_models.get_default_statistics, verbose_name='[필터링]추리논증 표준점수')),
                ('filtered_sum', models.JSONField(default=a_leet.models.abstract_models.get_default_statistics, verbose_name='[필터링]총점 표준점수')),
                ('leet', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='predict_statistics', to='a_leet.leet')),
            ],
            options={
                'verbose_name': '[합격예측] 01_시험통계',
                'verbose_name_plural': '[합격예측] 01_시험통계',
                'db_table': 'a_leet_predict_statistics',
                'constraints': [models.UniqueConstraint(fields=('leet', 'aspiration'), name='unique_leet_predict_statistics')],
            },
        ),
        migrations.AddConstraint(
            model_name='predictstudent',
            constraint=models.UniqueConstraint(fields=('leet', 'user'), name='unique_leet_predict_student'),
        ),
        migrations.AddConstraint(
            model_name='predictanswer',
            constraint=models.UniqueConstraint(fields=('student', 'problem'), name='unique_leet_predict_answer'),
        ),
        migrations.AddConstraint(
            model_name='problem',
            constraint=models.UniqueConstraint(fields=('leet', 'subject', 'number'), name='unique_leet_official_problem'),
        ),
    ]
